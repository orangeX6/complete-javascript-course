//-> THEORY LECTURES

// 246. Asynchronous JavaScript, AJAX and APIs
//>> Coordinating behavior of a program over a period of time
//>> Asynchronous means not occurring at the same time
//-> Asynchronous code is executed after a task that runs in the "background" finishes.
//-> Asynchronous code is  'non-blocking'
//-> Execution doesn't wait for an asynchronous task to finish its work.

//Example of asynchronous code in js
//* 1. Asynchronous image loading with event and callback
//img.src -> loading of image happens asynchronously
//we provide the callback function to the load event to call the function once the image is loaded and not right away
//* 2. Geolocation API or AJAX calls, etc
//? Callback functions alone do NOT make code asynchronous

//////////////////////////////////////////////////
//-> >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
//->> AJAX
//>> Stands for Asynchronous Javascript And XML.
//-> Allows us to communicate with remote web servers in an asynchronous way.
//-> With AJAX calls, we can REQUEST DATA from web servers dynamically

//?HOW AJAX WORKS ?
//? Client <====Request/Response====> Webserver

//? AJAX is a term which got popular back and so we still use it. But most apis don't use XML data format these days
//-> Most popular API data format now is JSON

//////////////////////////////////////////////////
//-> >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
//->> API
//>> Stands for Application Programming Interface.
//-> A piece of software that can be used by another piece of software, in order to allow applications to talk to each other
//Example - DOM API, Geolocation API, etc.

//? "Online" API - Application running on a server, that receives requests for data, and sends data back to response.
//? We simply call these APIs or WebAPIs

//There are APIs about everything. Example ->
// For travelling app you can get an api for
//* Weather data
//* Data about countries
//* Flights Data
//* Currency conversion data
//* APIs for sending email or SMS
//* Google Maps
//There are millions of possibilities

//////////////////////////////////////////////
//////////////////////////////////////////////
//////////////////////////////////////////////
//////////////////////////////////////////////

// 247. IMPORTANT: API URL Change
//-> USE THIS
// https://restcountries.com/v2/
// https://restcountries.com/v3.1/name/{name}

/////////////////////////////////////////////////
/////////////////////////////////////////////////
/////////////////////////////////////////////////
/////////////////////////////////////////////////
/////////////////////////////////////////////////
/////////////////////////////////////////////////
/////////////////////////////////////////////////
/////////////////////////////////////////////////
/////////////////////////////////////////////////
/////////////////////////////////////////////////
/////////////////////////////////////////////////
/////////////////////////////////////////////////
/////////////////////////////////////////////////
/////////////////////////////////////////////////
/////////////////////////////////////////////////
/////////////////////////////////////////////////
/////////////////////////////////////////////////

// 248. Our First AJAX Call: XMLHttpRequest
//? There are multiple ways to do AJAX calls
//>> We will use XMLHttpRequest in this lecture
//! Any API we use here should always have CORS set to yes or maybe unknown, without CORS we cannot access a third party API into our own code
// We will be using the Rest Countries API
//-> https://github.com/public-api-lists/public-api-lists
//>> CORS - Cross Origin Resource Sharing

/////////////////////////////////////////////////
/////////////////////////////////////////////////
/////////////////////////////////////////////////
/////////////////////////////////////////////////
/////////////////////////////////////////////////
/////////////////////////////////////////////////
/////////////////////////////////////////////////
/////////////////////////////////////////////////
/////////////////////////////////////////////////
/////////////////////////////////////////////////
/////////////////////////////////////////////////
/////////////////////////////////////////////////
/////////////////////////////////////////////////
/////////////////////////////////////////////////
/////////////////////////////////////////////////
/////////////////////////////////////////////////
/////////////////////////////////////////////////

// 249. [OPTIONAL] How the Web Works: Requests and Responses
//-> The request response model or Client-Server Architecture
//>> A browser as a client sends request to a server and then the server sends response, and that response contains the data that we requested.

//https://  restcountries.com/  v2/alpha/IN
//  |             |                 |
//Protocol      Domain Name     Resource
//(http or https)

//-> What happens when we access a web server
//-> 1.
// Domain Name is converted to real address of server with the help of DNS(Domain Name Server).
//Browser makes request to DNS which sends the IP address as response

//-> 2.
// TCP/IP Socket Connection connects the client to the Web Server with its IP Addr
//TCP - Transmission Control Protocol
//IP - Internet Protocol

//-> 3.
//Once communication is established - HTTP Request is made by the client to the server.
//HTTP - Hyper Text Transfer Protocol
// The request looks like ->
//* GET /rest/v2/alpha/IN HTTP/1.1 <- Start Line: Method + request target + HTTP version
//? Host: www.google.com      -\
//? User-Agent: Mozilla/5.0   --> HTTP Request Headers
//? Accept-Language: en-US    -|
//// <BODY>  -> REQUEST BODY (ONLY WHEN SENDING DATA TO SERVER)

//>> Most important HTTP Methods are ->
//>> 1. GET - Requesting Data
//>> 2. POST - Sending Data
//>> 3. PUT - Modifying Data
//>> 4. PATCH - Modifying data

//Difference Between HTTP and HTTPS -
//HTTPS is encrypted using TLS or SSL

//-> 4.
// HTTP RESPONSE Is the response sent by the server in response to the request send by client.

//The response looks like -
//* HTTP/1.1 200 OK -> HTTP version + status code + status msg
//? Date: fri, 18 jan 2021
//? Content Type: text/html
//? Transfer-encoding: chunked
//// <BODY>

/////////////////////////////////////////////////
/////////////////////////////////////////////////
/////////////////////////////////////////////////
/////////////////////////////////////////////////
/////////////////////////////////////////////////
/////////////////////////////////////////////////
/////////////////////////////////////////////////
/////////////////////////////////////////////////
/////////////////////////////////////////////////
/////////////////////////////////////////////////
/////////////////////////////////////////////////
/////////////////////////////////////////////////
/////////////////////////////////////////////////
/////////////////////////////////////////////////
/////////////////////////////////////////////////
/////////////////////////////////////////////////
/////////////////////////////////////////////////

// 250
//-> Call Back Hell -
//>> Call back hell is when we have a lot of nested call backs in order to execute asynchronous tasks in sequence.
// This happens to all asynchronous tasks which are handled by callbacks
//It makes code hard to maintain
//-> Since ES6 there is a way to escape the callback Hell and its promises.

/////////////////////////////////////////////////
/////////////////////////////////////////////////
/////////////////////////////////////////////////
/////////////////////////////////////////////////
/////////////////////////////////////////////////
/////////////////////////////////////////////////
/////////////////////////////////////////////////
/////////////////////////////////////////////////
/////////////////////////////////////////////////
/////////////////////////////////////////////////
/////////////////////////////////////////////////
/////////////////////////////////////////////////
/////////////////////////////////////////////////
/////////////////////////////////////////////////
/////////////////////////////////////////////////
/////////////////////////////////////////////////
/////////////////////////////////////////////////

//251
//251. Promises and the Fetch API
//-> PROMISE: (ES6 2015)
//>>Definition. An Object that is used as a placeholder for the future result of an asynchronous operation
//->Simple terms: A container for an asynchronously delivered value
//>>More Simple Terms: A container for a future value
//*EXAMPLE - Response from AJAX call

//? Advantages of Using Promises ?
//? 1. We no longer need to rely on events and callbacks passed into asynchronous functions to handle asynchronous results
//? 2. Instead of nesting callbacks, we can chain promises for a sequence of asynchronous operations: escaping callback hell

//>> HOW WE USED AJAX CALLS
// const request = new XMLHttpRequest();
// request.open(
//   'GET',
//   `https://restcountries.com/v2/name/${country}?fullText=true`
// );
// request.send();

//>> WHAT WE HAVE TO DO IN PROMISES
const request = fetch(`https://restcountries.com/v2/name/India?fullText=true`);
console.log(request); // outputs Promise Object

//-> PROMISE LIFECYCLE

//* PENDING --async task----> SETTLED
//*                          /    \
//->                 FULFILLED     \
//!                              REJECTED
// We are able to handle these different states in our code

/////////////////////////////////////////////////
/////////////////////////////////////////////////
/////////////////////////////////////////////////
/////////////////////////////////////////////////
/////////////////////////////////////////////////
/////////////////////////////////////////////////
/////////////////////////////////////////////////
/////////////////////////////////////////////////
/////////////////////////////////////////////////
/////////////////////////////////////////////////
/////////////////////////////////////////////////
/////////////////////////////////////////////////
/////////////////////////////////////////////////
/////////////////////////////////////////////////
/////////////////////////////////////////////////
/////////////////////////////////////////////////
/////////////////////////////////////////////////

// 254. Handling Rejected Promises
//? There are two ways of handling rejections -
//* 1. Passing a second callback to the then method
//! .then(
//!   response => response.json(),
//!   err => alert(err)
//! )
//* 2. Using the catch method at the end of the promise chain
//->  .catch(err => alert(err));

//? Finally block is executed no matter what, i.e if promise is fulfilled or not
// .finally(() => {
//     countriesContainer.style.opacity = 1;
//   })

/////////////////////////////////////////////////
/////////////////////////////////////////////////
/////////////////////////////////////////////////
/////////////////////////////////////////////////
/////////////////////////////////////////////////
/////////////////////////////////////////////////
/////////////////////////////////////////////////
/////////////////////////////////////////////////
/////////////////////////////////////////////////
/////////////////////////////////////////////////
/////////////////////////////////////////////////
/////////////////////////////////////////////////
/////////////////////////////////////////////////
/////////////////////////////////////////////////
/////////////////////////////////////////////////
/////////////////////////////////////////////////
/////////////////////////////////////////////////

//255. Throwing error manually
//-> We use throw keyword to throw errors manually
// throw new Error('Country not found')

// We create an error using the error constructor function (new Error())
//-> We use the throw keyword which will immediately terminate the execution of current function just like return
//? The effect of creating and throwing error in any of the then method is that the promise will immediately be rejected

/////////////////////////////////////////////////
/////////////////////////////////////////////////
/////////////////////////////////////////////////
/////////////////////////////////////////////////
/////////////////////////////////////////////////
/////////////////////////////////////////////////
/////////////////////////////////////////////////
/////////////////////////////////////////////////
/////////////////////////////////////////////////
/////////////////////////////////////////////////
/////////////////////////////////////////////////
/////////////////////////////////////////////////
/////////////////////////////////////////////////
/////////////////////////////////////////////////
/////////////////////////////////////////////////
/////////////////////////////////////////////////
/////////////////////////////////////////////////
